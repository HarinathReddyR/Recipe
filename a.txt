import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Navbar from '.componentsNavbar';
import FilterPanel from '.componentsFilter';
import RecipeList from '.componentsRecipeList';
import RecipeDetails from '.componentsRecipeDetails';  New component for recipe details
import axios from 'axios';
import { Recipe } from '.interfaceRecipe';
import '.App.css';

const App React.FC = () = {
  const initialFilters = {
    categories [] as string[],
    ingredients [] as string[],
    proteins [0, 100],
    fat [0, 50],
    sodium [0, 2000],
    calories [0, 2000],
    rating {} as { [key number] boolean },
  };

  const [searchQuery, setSearchQuery] = useStatestring('');
  const [filters, setFilters] = useStatetypeof initialFilters(initialFilters);
  const [recipes, setRecipes] = useStateRecipe[]([]);
  const [topRatedRecipes, setTopRatedRecipes] = useStateRecipe[]([]);
  const [showTopRated, setShowTopRated] = useStateboolean(true);
  const [loading, setLoading] = useStateboolean(false);

  const updateFilters = (newFilters Partialtypeof filters) = {
    setFilters((prevFilters) = ({
      ...prevFilters,
      ...newFilters,
    }));
  };

  const resetFilters = () = {
    setFilters(initialFilters);
  };

  const fetchRecipes = async (query string, activeFilters any) = {
    console.log('Fetching recipes with query and filters', query, activeFilters);
    setSearchQuery(query);
    setShowTopRated(false);
    setLoading(true);
    try {
      const response = await axios.get(`httplocalhost5000apirecipessearch`, {
        params { search query, filters activeFilters },
      });
      console.log('Received response', response.data);
      setRecipes(Array.isArray(response.data)  response.data  []);
    } catch (error) {
      console.error('Error fetching recipes', error);
      setRecipes([]);
    } finally {
      setLoading(false);
    }
  };

  const fetchTopRatedRecipes = async () = {
    setLoading(true);
    try {
      const response = await axios.get('httplocalhost5000apirecipestop-rated');
      console.log('Top rated recipes', response.data);
      setTopRatedRecipes(Array.isArray(response.data)  response.data  []);
      setShowTopRated(true);
    } catch (error) {
      console.error('Error fetching top rated recipes', error);
      setTopRatedRecipes([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() = {
    fetchTopRatedRecipes();
  }, []);

  useEffect(() = {
    const hasActiveFilters = Object.values(filters).some(value = {
      if (Array.isArray(value)) {
        return value.length  0;
      }
      if (typeof value === 'object') {
        return Object.keys(value).some(key = value[+key]);
      }
      return false;
    });

    if (searchQuery  hasActiveFilters) {
      fetchRecipes(searchQuery, filters);
    } else {
      fetchTopRatedRecipes();
      setShowTopRated(true);
    }
  }, [filters, searchQuery]);

  const handleClearSearch = () = {
    setSearchQuery('');
    setFilters(initialFilters);
    fetchTopRatedRecipes();
    setShowTopRated(true);
  };

  return (
    Router
      div className=app-container
        Navbar onSearch={(query) = fetchRecipes(query, filters)} 
        div className=content
          FilterPanel filters={filters} setFilters={updateFilters} resetFilters={resetFilters} 
          div className=title-container
            Routes
              Route path= element={
                showTopRated  (
                  
                    h1 className=titleTop Ratedh1
                    {loading  (
                      div className=loadingLoading...div
                    )  (
                      RecipeList recipes={topRatedRecipes} 
                    )}
                  
                )  (
                  
                    div className=search-results-header
                      h1 className=titleSearch Results for {searchQuery}h1
                      button className=clear-button onClick={handleClearSearch}Clearbutton
                    div
                    {loading  (
                      div className=loadingLoading...div
                    )  (
                      RecipeList recipes={recipes} 
                    )}
                  
                )
              } 
              Route path=recipeid element={RecipeDetails }  { Route for recipe details }
            Routes
          div
        div
      div
    Router
  );
};

export default App;
